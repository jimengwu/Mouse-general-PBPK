capture Brain  = C_Brain*1000;
capture Lung  = C_Lung*1000;
capture Lung_t = C_Lung_tissue*1000;
//capture GI  = C_GI*1000;
capture Rest  = C_Rest*1000;
capture M_tot  = M_Balance;
capture Q = Q_balance;
capture iv = MBV;
'
mod <- mcode ("mouse_PBPK", mousePBPK.code)
## calculate the deposition volume
out <-
mod %>%
update(atol = 1E-80,maxsteps = 5000000) %>%
mrgsim_d(data = ex.iv, tgrid=tsamp)
## save the calculated into data frame
out <- data.frame(Time=out$time,
Qbal = out$Q,
CL=out$Liver,
CLt = out$Liver_t,
CK = out$Kidney,
CKt = out$Kidney_t,
CS = out$Spleen,
CSt = out$Spleen_t,
CB= out$Brain,
CR=out$Rest,
Clung = out$Lung,
CLungt = out$Lung_t,
mtot = out$M_tot,
iv = out$iv
#plasma = out$plasma
)
plot (y=out$CLt, x=out$Time,xlab = "Time", main = "Liver Tissue concentration-13nm",
type='l',log="x",xlim=c(0.1,1000),ylim=c(0,10000))
plot (y=out$CSt, x=out$Time,xlab = "Time", main = "Spleen Tissue concentration-13nm",
type='l',log="x",xlim=c(0.1,1000),ylim=c(0,50000))
plot (y=out$CKt, x=out$Time,xlab = "Time", main = "Kidney Tissue concentration-13nm",
type='l',log="x",xlim=c(0.1,1000),ylim=c(0,1500))
plot (y=out$CLungt, x=out$Time,xlab = "Time", main = "Lung Tissue concentration-13nm",
type='l',log="x",xlim=c(0.1,1000),ylim=c(0,1500))
pred.mouse <- function(pars) {
## Get out of log domain
pars %<>% lapply(exp)
## Define the exposure scenario
BW           = 0.02                              ## kg, body weight
tinterval    = 1                                 ## hr, Time interval
TDoses       = 1                                 ## Dose times, only one dose
PDOSE        = 0.85                              ## mg/kg-day, Single dose
DOSE         = PDOSE*BW                          ## mg, amount of iv dose
ex.iv<- ev(ID=1, amt= DOSEoral,                  ## Set up the exposure events
ii=tinterval, addl=TDoses-1,
cmt="MBV", replicate = FALSE)
## Set up the exposure time
tsamp=tgrid(0,tinterval*(TDoses-1)+24*7,1)     ## Simulation time 24*180 hours (180 days)
## calculate the deposition volume
out <-
mod %>%
param(pars) %>%
##Req(Liver,M_tot,MBV)%>%
update(atol = 1E-80,maxsteps = 5000000) %>%
mrgsim_d(data = ex.iv, tgrid=tsamp)
## save the calculated into data frame
out <- data.frame(Time=out$time,
Qbal = out$Q,
CLt=out$Liver_t,
CKt = out$Kidney_t,
CSt = out$Spleen_t,
#CBt= out$Brain_t,
#CG = out$GI,
#CR=out$Rest,
Clungt = out$Lung_t,
mtot = out$M_tot,
iv = out$iv)
return(out)
}
# initial parameters
params.init <- log(c(
K_release_Liver = 0.001,  # h-1
K_max_Liver = 20,         # h-1
K_50_Liver = 48,          # h
n_Liver = 5,              # Unitless
#K_release_GI = 0.003,     # h-1
#K_max_GI = 0.075,         # h-1
#K_50_GI = 24,             # h
#n_GI = 5,                 # Unitless
K_release_Spleen = 0.001, # h-1
K_max_Spleen = 40,        # h-1
K_50_Spleen = 48,
n_Spleen = 5,
K_release_Kidney = 0.0004, # h-1
K_max_Kidney = 0.075,
K_50_Kidney = 24,
n_Kidney = 5,
K_release_Lung = 0.003,   # h-1
K_max_Lung = 0.075,
K_50_Lung = 24,
n_Lung = 5,
P_Liver  = 0.08,
P_Brain  = 0.15,
P_Kidney  = 0.15,
P_Spleen  = 0.15,
P_Lung  = 0.15,
P_Rest  = 0.15,
DLC_Liver = 0.001,
DLC_Brain = 0.000001,
DLC_Kidney = 0.001,
DLC_Spleen = 0.03,
DLC_Lung = 0.001,
#DLC_GI = 0.001,
DLC_Rest = 0.000001,
Kbile = 0.00003,       # Biliary clearance (L/hr)
Kurine = 0.000003,     # Urine clearance (L/hr)
#Kfecal = 0.000003      # Urine clearance (L/hr)
))
# initial parameters
params.init <- log(c(
K_release_Liver = 0.001,  # h-1
K_max_Liver = 20,         # h-1
K_50_Liver = 48,          # h
n_Liver = 5,              # Unitless
#K_release_GI = 0.003,     # h-1
#K_max_GI = 0.075,         # h-1
#K_50_GI = 24,             # h
#n_GI = 5,                 # Unitless
K_release_Spleen = 0.001, # h-1
K_max_Spleen = 40,        # h-1
K_50_Spleen = 48,
n_Spleen = 5,
K_release_Kidney = 0.0004, # h-1
K_max_Kidney = 0.075,
K_50_Kidney = 24,
n_Kidney = 5,
K_release_Lung = 0.003,   # h-1
K_max_Lung = 0.075,
K_50_Lung = 24,
n_Lung = 5,
P_Liver  = 0.08,
P_Brain  = 0.15,
P_Kidney  = 0.15,
P_Spleen  = 0.15,
P_Lung  = 0.15,
P_Rest  = 0.15,
DLC_Liver = 0.001,
DLC_Brain = 0.000001,
DLC_Kidney = 0.001,
DLC_Spleen = 0.03,
DLC_Lung = 0.001,
#DLC_GI = 0.001,
DLC_Rest = 0.000001,
Kbile = 0.00003,       # Biliary clearance (L/hr)
Kurine = 0.000003,     # Urine clearance (L/hr)
#Kfecal = 0.000003      # Urine clearance (L/hr)
))
# initial parameters
params.init <- log(c(
K_release_Liver = 0.001,  # h-1
K_max_Liver = 20,         # h-1
K_50_Liver = 48,          # h
n_Liver = 5,              # Unitless
#K_release_GI = 0.003,     # h-1
#K_max_GI = 0.075,         # h-1
#K_50_GI = 24,             # h
#n_GI = 5,                 # Unitless
K_release_Spleen = 0.001, # h-1
K_max_Spleen = 40,        # h-1
K_50_Spleen = 48,
n_Spleen = 5,
K_release_Kidney = 0.0004, # h-1
K_max_Kidney = 0.075,
K_50_Kidney = 24,
n_Kidney = 5,
K_release_Lung = 0.003,   # h-1
K_max_Lung = 0.075,
K_50_Lung = 24,
n_Lung = 5,
P_Liver  = 0.08,
P_Brain  = 0.15,
P_Kidney  = 0.15,
P_Spleen  = 0.15,
P_Lung  = 0.15,
P_Rest  = 0.15,
DLC_Liver = 0.001,
DLC_Brain = 0.000001,
DLC_Kidney = 0.001,
DLC_Spleen = 0.03,
DLC_Lung = 0.001,
#DLC_GI = 0.001,
DLC_Rest = 0.000001,
Kbile = 0.00003,       # Biliary clearance (L/hr)
Kurine = 0.000003     # Urine clearance (L/hr)
#Kfecal = 0.000003      # Urine clearance (L/hr)
))
## Cost function (FME)
## Estimate the model residual by modCost function
MCcost<-function (pars, obs){
out<- pred.mouse(pars)
cost<- modCost(model=out,obs=obs,weight='std',x="Time")
return(cost)
}
## Cost function (FME)
## Estimate the model residual by modCost function
MCcost<-function (pars, obs){
out<- pred.mouse(pars)
cost<- modCost(model=out,obs=obs,weight='std',x="Time")
return(cost)
}
## Sensitivity function (FME)
## Check the sensitive parameters in the model
Sens <- sensFun(func = pred.mouse, parms = params.init,varscale = 1)
pred.mouse <- function(pars) {
## Get out of log domain
pars %<>% lapply(exp)
## Define the exposure scenario
BW           = 0.02                              ## kg, body weight
tinterval    = 1                                 ## hr, Time interval
TDoses       = 1                                 ## Dose times, only one dose
PDOSE        = 0.85                              ## mg/kg-day, Single dose
DOSE         = PDOSE*BW                          ## mg, amount of iv dose
ex.iv<- ev(ID=1, amt= DOSE,                  ## Set up the exposure events
ii=tinterval, addl=TDoses-1,
cmt="MBV", replicate = FALSE)
## Set up the exposure time
tsamp=tgrid(0,tinterval*(TDoses-1)+24*7,1)     ## Simulation time 24*180 hours (180 days)
## calculate the deposition volume
out <-
mod %>%
param(pars) %>%
##Req(Liver,M_tot,MBV)%>%
update(atol = 1E-80,maxsteps = 5000000) %>%
mrgsim_d(data = ex.iv, tgrid=tsamp)
## save the calculated into data frame
out <- data.frame(Time=out$time,
Qbal = out$Q,
CLt=out$Liver_t,
CKt = out$Kidney_t,
CSt = out$Spleen_t,
#CBt= out$Brain_t,
#CG = out$GI,
#CR=out$Rest,
Clungt = out$Lung_t,
mtot = out$M_tot,
iv = out$iv)
return(out)
}
## Cost function (FME)
## Estimate the model residual by modCost function
MCcost<-function (pars, obs){
out<- pred.mouse(pars)
cost<- modCost(model=out,obs=obs,weight='std',x="Time")
return(cost)
}
## Sensitivity function (FME)
## Check the sensitive parameters in the model
Sens <- sensFun(func = pred.mouse, parms = params.init,varscale = 1)
df_Sens=summary(Sens)
plot(df_Sens)
View(Sens)
View(df_Sens)
params2fit <- log(c(
K_release_Liver = 0.001,  ## h-1
K_max_Liver = 20,  ## h-1
K_50_Liver = 48,  ## h
# n_Liver = 5,  ## Unit less
#K_release_GI = 0.003,
#K_max_GI = 0.075,
#K_50_GI = 24,
#n_GI = 5,
K_release_Spleen = 0.001,
K_max_Spleen = 40,
K_50_Spleen = 48,
#n_Spleen = 5,
K_release_Kidney = 0.0004,
#K_max_Kidney = 0.075,
K_50_Kidney = 24,
#n_Kidney = 5,
K_release_Lung = 0.003,
#K_max_Lung = 0.075,
K_50_Lung = 24,
#n_Lung = 5,
#P_Liver  = 0.08,
#P_Brain  = 0.147 ,
#P_Kidney  = 0.147  ,
#P_Spleen  = 0.147  ,
#P_Lung  = 0.147 ,
#P_Rest  = 0.147,
DLC_Liver = 0.001,
DLC_Brain = 0.000001,
DLC_Kidney = 0.001,
DLC_Spleen = 0.03,
DLC_Lung = 0.001,
#DLC_GI = 0.001,
DLC_Rest = 0.000001,
Kbile = 0.00003,  # Biliary clearance (L/hr)
Kurine = 0.000003  # Urine clearance (L/hr)
#Kfecal = 0.000003  # Urine clearance (L/hr)
))
#---------------------------Fitting with A2 dataset-----------------------------
Obs.A2 <- read.csv(file ="C:/switchdriver/dataset/tk/mouse/R_input_mouse_study1_13nm_short.csv")
#-------------------fitting with only liver data-------------------
Obs.A2_L <- data.frame(Time=Obs.A2['Time'],
CL=Obs.A2['CL'])
View(Obs.A2_L)
pred.mouse <- function(pars) {
## Get out of log domain
pars %<>% lapply(exp)
## Define the exposure scenario
BW           = 0.02                              ## kg, body weight
tinterval    = 1                                 ## hr, Time interval
TDoses       = 1                                 ## Dose times, only one dose
PDOSE        = 0.85                              ## mg/kg-day, Single dose
DOSE         = PDOSE*BW                          ## mg, amount of iv dose
ex.iv<- ev(ID=1, amt= DOSE,                  ## Set up the exposure events
ii=tinterval, addl=TDoses-1,
cmt="MBV", replicate = FALSE)
## Set up the exposure time
tsamp=tgrid(0,tinterval*(TDoses-1)+24*7,1)     ## Simulation time 24*180 hours (180 days)
## calculate the deposition volume
out <-
mod %>%
param(pars) %>%
##Req(Liver,M_tot,MBV)%>%
update(atol = 1E-80,maxsteps = 5000000) %>%
mrgsim_d(data = ex.iv, tgrid=tsamp)
## save the calculated into data frame
out <- data.frame(Time=out$time,
Qbal = out$Q,
CL=out$Liver_t,
CK = out$Kidney_t,
CS = out$Spleen_t,
#CBt= out$Brain_t,
#CG = out$GI,
#CR=out$Rest,
Clung = out$Lung_t,
mtot = out$M_tot,
iv = out$iv)
return(out)
}
#-------------------fitting with only liver data-------------------
Obs.A2_L <- data.frame(Time=Obs.A2['Time'],
CL=Obs.A2['CL'])
Fit.Result.A2_L<- modFit(f=MCcost, p=params2fit, obs=Obs.A2_L, method ="Nelder-Mead",
control = nls.lm.control(nprint=1)) #"Nelder-Mead"
Fitted_output.A2_L = pred.mouse(par=Fit.Result.A2_L$par)
plot_L.A2=
ggplot() +
geom_line(data  = Fitted_output.A2_L, aes(Time,CL), col="firebrick", lwd=2)+
geom_point(data = Obs.A2    , aes(Time, CL), size=2.5) + ylab("Concentration")
plot_L.A2
plot_L.A2_Lung=
ggplot() +
geom_line(data  = Fitted_output.A2_L, aes(Time,Clung), col="firebrick", lwd=2)+
geom_point(data = Obs.A2    , aes(Time, Clung), size=2.5) + ylab("Concentration")
plot.A2_Lung
plot_L.A2_Lung=
ggplot() +
geom_line(data  = Fitted_output.A2_L, aes(Time,Clung), col="firebrick", lwd=2)+
geom_point(data = Obs.A2    , aes(Time, Clung), size=2.5) + ylab("Concentration")
plot_L.A2_Lung
plot_L.A2_Kidney=
ggplot() +
geom_line(data  = Fitted_output.A2_L, aes(Time,CK), col="firebrick", lwd=2)+
geom_point(data = Obs.A2    , aes(Time, CK), size=2.5) + ylab("Concentration")
plot_L.A2_Kidney
plot_L.A2_Spleen=
ggplot() +
geom_line(data  = Fitted_output.A2_L, aes(Time,CS), col="firebrick", lwd=2)+
geom_point(data = Obs.A2    , aes(Time, CS), size=2.5) + ylab("Concentration")
plot_L.A2_Spleen
help(sensFun)
??sensFun
## =======================================================================
## Bacterial growth model as in Soetaert and Herman, 2009
## =======================================================================
pars <- list(gmax = 0.5, eff = 0.5,
ks = 0.5, rB = 0.01, dB = 0.01)
pars
solveBact <- function(pars) {
derivs <- function(t, state, pars) { # returns rate of change
with (as.list(c(state, pars)), {
dBact <-  gmax * eff * Sub/(Sub + ks) * Bact - dB * Bact - rB * Bact
dSub  <- -gmax       * Sub/(Sub + ks) * Bact + dB * Bact
return(list(c(dBact, dSub)))
})
}
state   <- c(Bact = 0.1, Sub = 100)
tout    <- seq(0, 50, by = 0.5)
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = pars)))
}
out <- solveBact(pars)
plot(out$time, out$Bact, ylim = range(c(out$Bact, out$Sub)),
xlab = "time, hour", ylab = "molC/m3", type = "l", lwd = 2)
lines(out$time, out$Sub, lty = 2, lwd = 2)
lines(out$time, out$Sub + out$Bact)
legend("topright", c("Bacteria", "Glucose", "TOC"),
lty = c(1, 2, 1), lwd = c(2, 2, 1))
View(out)
## sensitivity functions
SnsBact <- sensFun(func = solveBact, parms = pars,
sensvar = "Bact", varscale = 1)
head(SnsBact)
plot(SnsBact)
plot(summary(SnsBact))
plot(SnsBact, type = "b", pch = 15:19, col = 2:6,
main = "Sensitivity all vars")
View(SnsBact)
SF <- sensFun(func = solveBact, parms = pars,
sensvar = c("Bact", "Sub"), varscale = 1)
head(SF)
tail(SF)
summary(SF, var = TRUE)
plot(SF)
plot(SF, which = c("Sub","Bact"))
plot(out$time, out$Bact, ylim = range(c(out$Bact, out$Sub)),
xlab = "time, hour", ylab = "molC/m3", type = "l", lwd = 2)
lines(out$time, out$Sub, lty = 2, lwd = 2)
legend("topright", c("Bacteria", "Glucose", "TOC"),
lty = c(1, 2, 1), lwd = c(2, 2, 1))
lines(out$time, out$Sub + out$Bact)
plot(SnsBact)
plot(SnsBact, type = "b", pch = 15:19, col = 2:6,
main = "Sensitivity all vars")
plot(out$time, out$Bact, ylim = range(c(out$Bact, out$Sub)),
xlab = "time, hour", ylab = "molC/m3", type = "l", lwd = 2)
lines(out$time, out$Sub, lty = 2, lwd = 2)
lines(out$time, out$Sub + out$Bact)
legend("topright", c("Bacteria", "Glucose", "TOC"),
lty = c(1, 2, 1), lwd = c(2, 2, 1))
View(SnsBact)
View(SF)
plot(SF)
plot(SF, which = c("Sub","Bact"))
pm <- par(mfrow = c(1,3))
plot(SF, which = c("Sub", "Bact"), mfrow = NULL)
plot(SF, mfrow = NULL)
par(mfrow = pm)
## Bivariate sensitivity
pairs(SF)  # same color
pairs(SF, which = "Bact", col = "green", pch = 15)
pairs(SF, which = c("Bact", "Sub"), col = c("green", "blue"))
mtext(outer = TRUE, side = 3, line = -2,
"Sensitivity functions", cex = 1.5)
## pairwise correlation
cor(SnsBact[,-(1:2)])
pm <- par(mfrow = c(1,3))
plot(SF, which = c("Sub", "Bact"), mfrow = NULL)
plot(SF, mfrow = NULL)
par(mfrow = pm)
pm
head(SnsBact)
View(Sens)
## Sensitivity function (FME)
## Check the sensitive parameters in the model
Sens <- sensFun(func = pred.mouse, parms = params.init,sensvar = c("CLt", "CKt"),
varscale = 1)
Sens <- sensFun(func = pred.mouse, parms = params.init,sensvar = c("CLt", "CKt"),
varscale = 1)
## Load libraries
library(mrgsolve)    # Needed for Loading mrgsolve code into r via mcode from the 'mrgsolve' pckage
library(magrittr)    # The pipe, %>% , comes from the magrittr package by Stefan Milton Bache
library(dplyr)       # The pipe, %>% , comes from the magrittr package by Stefan Milton Bache
library(ggplot2)     # Needed for plot
library(FME)         # Package for MCMC simulation and model fitting
library(minpack.lm)  # Package for model fitting
library(reshape)     # Package for melt function to reshape the table
library(truncnorm)   # Package for the truncated normal distribution function
library(EnvStats)    # Package for Environmental Statistics, Including US EPA Guidance
library(invgamma)    # Package for inverse gamma distribution function
library(foreach)     # Package for parallel computing
library(doParallel)  # Package for parallel computing
library(bayesplot)   # Package for MCMC traceplot
library(bayesplot)   # Package for MCMC traceplot
Sens <- sensFun(func = pred.mouse, parms = params.init,sensvar = c("CLt", "CKt"),
varscale = 1)
View(out)
View(out)
View(Fit.Result.A2_L)
Sens <- sensFun(func = pred.mouse, parms = params.init,sensvar = "CLt",
varscale = 1)
Sens <- sensFun(func = pred.mouse, parms = params.init,sensvar = "CLt",varscale = 1)
Sens <- sensFun(func = pred.mouse, parms = params.init,varscale = 1)
View(Sens)
View(SnsBact)
head(Sens)
plot(Sens, type = "b", pch = 15:19, col = 2:6,
main = "Sensitivity all vars")
plot(SF, which = c("Sub","Bact"))
plot(SF)
plot(SF, which = c("Sub","Bact"))
View(Sens)
## Sensitivity function (FME)
## Check the sensitive parameters in the model
Sens <- sensFun(func = pred.mouse, parms = params.init,varscale = 1,sensvar = c("Qbal"))
View(Sens)
head(Sens)
plot(Sens)
plot(Sens, type = "b", pch = 15:19, col = 2:6,
main = "Sensitivity all vars")
df_Sens=summary(Sens)
plot(df_Sens)
## Sensitivity function (FME)
## Check the sensitive parameters in the model
Sens <- sensFun(func = pred.mouse, parms = params.init,varscale = 1,sensvar = c("CL"))
head(Sens)
plot(Sens)
plot(Sens, type = "b", pch = 15:19, col = 2:6,
main = "Sensitivity all vars")
df_Sens=summary(Sens)
plot(df_Sens)
View(df_Sens)
theta.Rat <- readRDS("C:/work/Code/PBPK/Verfication2/Results/Workplace/theta.Rat.Rds")
